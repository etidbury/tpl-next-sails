{
  "extends": "eslint:recommended",
  "env": {
    "browser": true,
    "commonjs": true,
    "node": true,
    "es6": true
  },
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "rules": {
    /* JSX */
    "no-restricted-globals": "off",
    "react/prop-types": [
      1,
      {
        "ignore": [
          "className",
          "children",
          "location",
          "params",
          "location*"
        ]
      }
    ],
    "no-param-reassign": [
      0,
      {
        "props": false
      }
    ],
    "prefer-rest-params": 1,
    "arrow-body-style": 0,
    "prefer-template": 0,
    "react/prefer-stateless-function": 1,
    "react/jsx-no-bind": [
      0,
      {
        "ignoreRefs": false,
        "allowArrowFunctions": false,
        "allowBind": true
      }
    ],
    "no-unused-vars": [
      0
    ],
    "no-console": "off",
    "strict": [
      0
    ],
    "curly": "warn",


    /**Edds specific recommendations**/
    "promise/always-return": "warn",  /*Return inside each then() to create readable and reusable Promise chains.*/
    "promise/no-return-wrap": "error",//Avoid wrapping values in Promise.resolve or Promise.reject when not needed.
    "promise/param-names": "error",//Enforce consistent param names when creating new promises.
    "promise/catch-or-return": "warn",//Return inside each then() to create readable and reusable Promise chains.
    "promise/no-native": "off",//In an ES5 environment, make sure to create a Promise constructor before using.
    "promise/no-nesting": "off",//Avoid nested then() or catch() statements
    "promise/no-promise-in-callback": "warn",//Avoid using promises inside of callbacks
    "promise/no-callback-in-promise": "warn",//Avoid calling cb() inside of a then() (use nodeify instead)
    "promise/avoid-new": "warn",//Avoid creating new promises outside of utility libs (use pify instead)
    "promise/no-new-statics": "error",//Avoid calling new on a Promise static method
    "promise/no-return-in-finally": "warn",//Disallow return statements in finally()
    "promise/valid-params": "warn"//Ensures the proper number of arguments are passed to Promise functions
  },
  "plugins": [
    "promise",
    "flowtype"
  ],
  "globals": {
    // If "no-undef" is enabled below, be sure to list all global variables that
    // are used in this app's backend code (including the globalIds of models):
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    "it": true,
    "describe": true,
    "Promise": true,

    // â€¦and any others.
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  }
}